// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/author/v1/author.proto (package api.author.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * @generated from message api.author.v1.Author
 */
export class Author extends Message<Author> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: string fullname = 2;
   */
  fullname = '';

  constructor(data?: PartialMessage<Author>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'api.author.v1.Author';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'fullname', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Author {
    return new Author().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Author {
    return new Author().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Author {
    return new Author().fromJsonString(jsonString, options);
  }

  static equals(
    a: Author | PlainMessage<Author> | undefined,
    b: Author | PlainMessage<Author> | undefined,
  ): boolean {
    return proto3.util.equals(Author, a, b);
  }
}

/**
 * @generated from message api.author.v1.GetAuthorRequest
 */
export class GetAuthorRequest extends Message<GetAuthorRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<GetAuthorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'api.author.v1.GetAuthorRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetAuthorRequest {
    return new GetAuthorRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetAuthorRequest {
    return new GetAuthorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetAuthorRequest {
    return new GetAuthorRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetAuthorRequest | PlainMessage<GetAuthorRequest> | undefined,
    b: GetAuthorRequest | PlainMessage<GetAuthorRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetAuthorRequest, a, b);
  }
}

/**
 * @generated from message api.author.v1.GetAuthorResponse
 */
export class GetAuthorResponse extends Message<GetAuthorResponse> {
  /**
   * @generated from field: api.author.v1.Author author = 1;
   */
  author?: Author;

  constructor(data?: PartialMessage<GetAuthorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'api.author.v1.GetAuthorResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'author', kind: 'message', T: Author },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetAuthorResponse {
    return new GetAuthorResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetAuthorResponse {
    return new GetAuthorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetAuthorResponse {
    return new GetAuthorResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetAuthorResponse | PlainMessage<GetAuthorResponse> | undefined,
    b: GetAuthorResponse | PlainMessage<GetAuthorResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetAuthorResponse, a, b);
  }
}
